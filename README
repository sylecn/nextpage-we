* COMMENT -*- mode: org -*-
#+Date: 2017-02-24
Time-stamp: <2017-10-19>

* Rewrite nextpage add-on using WebExtensions

* notes								      :entry:
** WebExtensions documents
Browser Extensions - Mozilla | MDN
https://developer.mozilla.org/en-US/Add-ons/WebExtensions

Content scripts - Mozilla | MDN
https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Content_scripts
Options page - Mozilla | MDN
https://developer.mozilla.org/en-US/Add-ons/WebExtensions/user_interface/Options_pages
storage.sync - Mozilla | MDN
https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/storage/sync
Publishing your extension - Mozilla | MDN
https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Publishing_your_WebExtension
Internationalization - Mozilla | MDN
https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Internationalization

** how to test web extension on localhost?
Open "about:debugging" in Firefox, click "Load Temporary Add-on" and select
any file in your extension's directory.

You can also use web-ext to load temporary WebExtensions from the command line.
https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Getting_started_with_web-ext
this requires node LTS and npm.

** how to build extension for distribution?
just run make

** test pages
debian install manual:
http://www.debian.org/releases/stable/amd64/
emacs manual:
http://www.gnu.org/software/emacs/manual/html_node/emacs/Commands.html#Commands
fedora doc:
https://docs-old.fedoraproject.org/en-US/Fedora/26/html/Installation_Guide/index.html
https://docs-old.fedoraproject.org/en-US/Fedora/26/html/System_Administrators_Guide/index.html
boost library:
http://www.boost.org/doc/libs/1_41_0/doc/html/array.html
bing search result:
https://www.bing.com/search?q=debian&qs=n&form=QBLH&sp=-1&pq=debian&sc=8-2&sk=&cvid=B56E4A93A3C4496DA0D9B031F698D9FA

** add-on distribution agreement
Firefox Add-on Distribution Agreement - Mozilla | MDN
https://developer.mozilla.org/en-US/Add-ons/AMO/Policy/Agreement
Add-on Policies - Mozilla | MDN
https://developer.mozilla.org/en-US/Add-ons/AMO/Policy/Reviews

* waiting							      :entry:
** 2017-10-18 in add-on website, config file help URL is down.
** 2017-10-19 zh_CN's messages.json is not read by firefox.
not sure why.
* todos								      :entry:
** 
** 2017-10-19 test it on android. is there a swipe event I can bind to?
** 2017-10-19 send notification when next page link is not found.
see example here:
webextensions-examples/background-script.js at master · mdn/webextensions-examples
https://github.com/mdn/webextensions-examples/blob/master/notify-link-clicks-i18n/background-script.js

** 2017-10-18 changelog for first 2.x release
- [feature] support firefox 57+
- [feature] user configuration is now synced by browser if you logged in.
- [feature] add new user config command ignore-on, you can now disable
  nextpage on some websites. fix issue #15.
- [notice] This version is a rewrite in Web Extension API. There are two
  changes that may affect user experience.
  - User config file ~/.config/nextpage.lisp is obsolete. If you have created
    user config file, please copy & paste the text to the new options window.
  - If some resource of a page loads very slow, nextpage hotkeys may not work
    on them.
  - Please report a bug if you have other issues in the new version.
- 
- problems
  - how to release the new add-on. it's no longer an xpi.
    https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Publishing_your_WebExtension
    just zip it.

  - DONE what is update_url? I don't have it yet.
    https://developer.mozilla.org/en-US/Add-ons/WebExtensions/manifest.json/applications
    try remove it.
  - warns about it's one-way upgrade. you can not go back to xpi.

    TODO I need to check my js files for errors and unused code.
    maybe rename some variables with underscore in them.

    TODO localization is not added yet. Chinese users will lose UI.

  - validator doesn't like usage of .innerHTML
    how to update h3 and span in javascript without using innerHTML?

    search: update span without using innerHTML
    using innerText
    or textContent

    myDiv.childNodes[0].nodeValue = "The text has been changed.";

    document.getElementById('elementid').firstChild.nodeValue = new_text;

* done								      :entry:
** 2017-10-19 run jslint on my js files
make check

** 2017-10-19 implement I18N for options window and manifest file.

- problems
  - do I need to use javascript to rewrite HTML tags in options.html?
    that will be boring.

    search: firefox web extension option page I18N

    title and labels shows nothing.
    add-on name is also not reflected on UI.

    try restart firefox

  - There was an error during installation: Extension is invalid

    search: firefox There was an error during installation: Extension is invalid

    works when I add messages.json for zh_CN. maybe it doesn't like empty
    locale dirs.

    now i18n works.

  - how to check zh_CN locale options page.
    about:config
    general.useragent.locale
    set to zh-CN
    need to restart firefox.

    addon name and description works.
    options page still show English.
    options page only fetch English message.json, not other languages.
    confirm in zh-CN and zh locale, it doesn't fetch _locale/zh_CN/messages.json

    search: browser.i18n.getMessage always fetch English

** 2017-10-18 disabled website 可以开放出来了。fix bug #15
(ignore-on "https://www.qidian.com/")
(ignore-on "https://.*\.qidian\.com/")

both works. cool.

- parse this command in options.js

  how to do proper parsing? there may be escapes in the string.
  just use regexp for now. don't care escapes.

- use the parse result in nextpage.js
- document it in usage.html

** 2017-10-18 add an options page. store user hotkeys somewhere.
- make user config file backward compatible.
- ~/projects/firefox/nextpage/src/chrome/content/config.jsm
- the old preferences window
  config file: ~/.config/nextpage.lisp

  built-in config:
  (bind "SPC" 'nextpage-maybe)
  (bind "n" 'nextpage)
  (bind "p" 'history-back)

  user config:
  <text area>

  [save & reload] [reload only] [Help]
- just remake it using WE api.
  Options page - Mozilla | MDN
  https://developer.mozilla.org/en-US/Add-ons/WebExtensions/user_interface/Options_pages

  reading a local text file is impossible now.
  maybe for security reasons.
  I will need to store the user configuration somewhere else.

  just use add-on storage api.
  https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/Storage

  parse result:
  see parseUserConfig docstring.

  make sure this works:
  1. open webpage. n, p, space works.
  2. change user config.
     #+BEGIN_SRC lisp
       ;; user config
       (enable-debug)
       (bind "SPC" 'nextpage-maybe)
       (bind "M-n" 'nextpage)
       (bind "p" 'history-back)
     #+END_SRC
     save and reload.
  3. open new webpage. M-n, p, SPC works.
  4. in old webpage. default key works. M-n doesn't.
- make mouse click work.
- if user clear user config, clear the parsed config key.
- update src/usage.html, there is no longer "file" concept.

  To retain old behavior, if user doesn't say unbind-all, all built-in binding
  should continue work.
- 

- problems
  - how should the two communicate? content script and options page?
    I can just read key map from storage api. this way it's always latest.
    when reload, just parse user config and store it in another key.

    notify page script to update a lexical binding is better.
    especially those debug variables.
    I don't like reading from pref for all of them.

    It will make things too complicated. Just make config work in new
    tabs. Leave existing tabs alone.
  - DONE remove all occurrence of in_overlay checks
  - storage saved in browser.storage.sync can't get back.
    storage.local has the same problem.
    I can't get back what I put in.

    I see the problem.
    let setKey = store.set({
	    STORAGE_KEY_USER_CONFIG: newUserConfig,
	    STORAGE_KEY_PARSED_CONFIG: parsedUserConfig
    });
    the capital name becomes object literal, not constant!
    you can force evaluation of the const using [CONST_NAME].

    works now.
  - 

** DONE 2017-10-18 make basic things work.
2017-10-18 16:46:15 basic things work.
test whether there are any js errors, then make a commit.

- problems
  - can I put my code in multiple files and compile them to one?
    I want to use es2015 modules.

    search: can I use es2015 modules in firefox web extension

    search: compile es2015 modules to a single javascript file

    I will keep it simple. just use old javascript.

  - DONE search for content\. after migrating. content is not needed in WE.

